@Library('aem-opencloud-manager') _

pipeline {
    agent {
        docker { image 'shinesolutions/aem-platform-buildenv-publisher:latest' }
    }
    environment {
        // PARAMETERS ARE NEEDED FOR IMPORT Package
        // THIS SHOULD BE REPLACED WITH A BETTER WAY OF GETTING THE YEAR TIMESTAMP
        EXPORT_PACKAGE_AUTHOR_TIMESTAMP = "2019"
        EXPORT_PACKAGE_PUBLISH_TIMESTAMP = "2019"
        AOC_CONFIG_DIR = "${env.TMPDIR}/aem-opencloud-config"
        TMPDIR = "/tmp/shinesolutions/aem-opencloud-manager"
    }
    parameters {
        string(name: 'AOC_CONFIG_PROFILE', defaultValue: '', description: 'Name of the config profile for AEM Test Suite')
        string(name: 'AOC_AEM_TEST_SUITE_CONFIG_PROFILE', defaultValue: '', description: 'Name of the config profile for AEM Test Suite')
        string(name: 'AOC_STACK_MANAGER_CONFIG_PROFILE', defaultValue: '', description: 'Name of the config profile for AEM Stack Manager')
        string(name: 'AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE', defaultValue: '', description: 'Name of the config profile for the AEM OpenCloud Stack Manager Messenger')
        string(name: 'DEPLOY_PACKAGE_DESCRIPTOR_FILE', defaultValue: 'deploy-artifacts-descriptor.json', description: 'Name of the descriptor file to deploy on the target AEM Stack')
        string(name: 'DEPLOY_PACKAGE_GROUP', defaultValue: 'shinesolutions', description: 'Package group name')
        string(name: 'DEPLOY_PACKAGE_NAME', defaultValue: 'aem-helloworld-content', description: 'Package name')
        string(name: 'DEPLOY_PACKAGE_SOURCE', defaultValue: 'http://central.maven.org/maven2/com/shinesolutions/aem-helloworld-content/0.0.1/aem-helloworld-content-0.0.1.zip', description: 'Package source URL')
        string(name: 'DEPLOY_PACKAGE_VERSION', defaultValue: '0.0.1', description: 'Package version')
        string(name: 'EXPORT_PACKAGE_GROUP', defaultValue: 'shinesolutions', description: 'Package group name')
        string(name: 'EXPORT_PACKAGE_NAME', defaultValue: 'aem-helloworld-content', description: 'Package name')
        string(name: 'EXPORT_PACKAGE_FILTER', defaultValue: "[{'root':'/apps/helloworld','rules':[]},{'root':'/content/helloworld','rules':[{'modifier':'exclude','pattern':'.*.\\d*\\.\\d*\\.(png|jpeg|gif)'}]},{'root':'/etc/designs/helloworld','rules':[]}]", description: "Package Filter e.g. [{'root':'/apps/helloworld','rules':[]},{'root':'/content/helloworld','rules':[{'modifier':'exclude','pattern':'.*.\\d*\\.\\d*\\.(png|jpeg|gif)'}]},{'root':'/etc/designs/helloworld','rules':[]}].")

        string(name: 'STACK_MANAGER_PREFIX', defaultValue: 'DEV-CON-SM-TEST', description: 'AEM OpenCloud Stack Manager prefix.')
        string(name: 'STACK_PREFIX', defaultValue: 'DEV-CON-TEST', description: 'AEM OpenCloud Stack prefix.')
        string(name: 'VERSION_AEM_AWS_STACK_BUILDER', defaultValue: '3.3.1', description: 'Version of aem-aws-stack-builder repo to archive')
        string(name: 'VERSION_AEM_STACK_MANAGER_MESSENGER', defaultValue: '2.0.0', description: 'Version of aem-stack-manager-messenger repo')
        string(name: 'VERSION_AEM_TEST_SUITE', defaultValue: '0.9.10', description: 'Version of aem-test-suite repo to archive')
    }
    stages {
        stage('Setup') {
            steps {
                // Setup Jenkins environment
                JenkinsInit this
                // Running global prerun-script
                JenkinsPipelinePreStep this
            }
        }
        stage('Prepare artifacts') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Prepare repositories
                    AocPrepareLibrary(this, "aem-aws-stack-builder", params.VERSION_AEM_AWS_STACK_BUILDER, params.AWS_LIBRARY_S3_BUCKET, AWS_LIBRARY_S3_PATH, env.TMPDIR)
                    AocPrepareLibrary(this, "aem-test-suite", params.VERSION_AEM_TEST_SUITE, params.AWS_LIBRARY_S3_BUCKET, AWS_LIBRARY_S3_PATH, env.TMPDIR)
                    AocPrepareLibrary(this, "aem-stack-manager-messenger", params.VERSION_AEM_STACK_MANAGER_MESSENGER, params.AWS_LIBRARY_S3_BUCKET, AWS_LIBRARY_S3_PATH, env.TMPDIR)
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Resolve dependencies') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Resolve dependencies
                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make deps")
                    ExecCommand(this, env.TMPDIR, "aem-test-suite", "make deps")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make deps")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Prepare configuration') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Create aem-aws-stack-builder configuration
                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make config config_path=${env.AOC_CONFIG_DIR}/aem-aws-stack-builder/${params.AOC_CONFIG_PROFILE}/")
                    // Create aem-test-suite configuration
                    ExecCommand(this, env.TMPDIR, "aem-test-suite", "make config-aem-aws config_path=${env.AOC_CONFIG_DIR}/aem-test-suite/${params.AOC_AEM_TEST_SUITE_CONFIG_PROFILE}/")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Create AEM OpenCloud Stacks') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Create AEM OpenCloud Consolidated Stack
                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make create-consolidated config_path=${env.AOC_CONFIG_DIR}/aem-aws-stack-builder/${params.AOC_CONFIG_PROFILE}/ stack_prefix=${params.STACK_PREFIX}")
                    // Create AEM OpenCloud Stack Manager
                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make create-stack-manager config_path=${env.AOC_CONFIG_DIR}/aem-aws-stack-builder/${params.AOC_STACK_MANAGER_CONFIG_PROFILE}/ stack_prefix=${params.STACK_MANAGER_PREFIX}")
                    // Check readiness of created Consolidated
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run Consolidated acceptance test') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Run acceptance test
                    ExecCommand(this, env.TMPDIR, "aem-test-suite", "make test-acceptance-author-primary stack_prefix=${params.STACK_PREFIX}")
                    ExecCommand(this, env.TMPDIR, "aem-test-suite", "make test-acceptance-publish stack_prefix=${params.STACK_PREFIX}")
                    ExecCommand(this, env.TMPDIR, "aem-test-suite", "make test-acceptance-publish-dispatcher stack_prefix=${params.STACK_PREFIX}")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event unschedule scheduled-jobs jobs') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Unschedule any scheduled snapshot jobs
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make unschedule-live-snapshot-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make unschedule-offline-snapshot-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make unschedule-offline-compaction-snapshot-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event list-packages') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // list all installed packages
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make list-packages stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/ component=author-publish-dispatcher")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event enable/disable crxde') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // enable crxde
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make enable-crxde stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/ component=author-publish-dispatcher")
                    // disable crxde
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make disable-crxde stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/ component=author-publish-dispatcher")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event flush-dispatcher-cache') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Flush dispatcher cache
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make flush-dispatcher-cache stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/ component=author-publish-dispatcher")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event deploy-artifacts-consolidated') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Deploy deployment descriptor file
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make deploy-artifacts-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/ descriptor_file=${params.DEPLOY_PACKAGE_DESCRIPTOR_FILE}")
                    // Check consolidated readiness after deployment
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event deploy-artifact') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Deploy single artifact on Author
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make deploy-artifact stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/ component=author-publish-dispatcher aem_id=author source=${params.DEPLOY_PACKAGE_SOURCE} group=${params.DEPLOY_PACKAGE_GROUP} name=${params.DEPLOY_PACKAGE_NAME} version=${params.DEPLOY_PACKAGE_VERSION} replicate=true activate=false force=true")
                    // Check consolidated readiness after deployment
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
                    // Deploy single artifact on Publish
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make deploy-artifact stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/ component=author-publish-dispatcher aem_id=publish source=${params.DEPLOY_PACKAGE_SOURCE} group=${params.DEPLOY_PACKAGE_GROUP} name=${params.DEPLOY_PACKAGE_NAME} version=${params.DEPLOY_PACKAGE_VERSION} replicate=true activate=false force=true")
                    // Check consolidated readiness after deployment
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event export-package') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Export package from Author
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make export-package stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/ component=author-publish-dispatcher aem_id=author package_group=${params.EXPORT_PACKAGE_GROUP} package_name=${params.EXPORT_PACKAGE_NAME} package_filter=${params.EXPORT_PACKAGE_FILTER}")
                    // Export package from Publish
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make export-package stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/ component=author-publish-dispatcher aem_id=publish package_group=${params.EXPORT_PACKAGE_GROUP} package_name=${params.EXPORT_PACKAGE_NAME} package_filter=${params.EXPORT_PACKAGE_FILTER}")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event import-package') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Import exoprted package to Author
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make import-package stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/ component=author-publish-dispatcher aem_id=author source_stack_prefix=${params.STACK_PREFIX} package_group=${params.EXPORT_PACKAGE_GROUP} package_name=${params.EXPORT_PACKAGE_NAME} package_datestamp=${env.EXPORT_PACKAGE_AUTHOR_TIMESTAMP}")
                    // Check consolidated readiness after deployment
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
                    // Import exoprted package to Publish
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make import-package stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/ component=author-publish-dispatcher aem_id=publish source_stack_prefix=${params.STACK_PREFIX} package_group=${params.EXPORT_PACKAGE_GROUP} package_name=${params.EXPORT_PACKAGE_NAME} package_datestamp=${env.EXPORT_PACKAGE_PUBLISH_TIMESTAMP}")
                    // Check consolidated readiness after deployment
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event live-snapshot') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // run live snapshot
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make live-snapshot stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/ component=author-publish-dispatcher")
                    // Check consolidated readiness after deployment
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event offline-snapshot') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Trigger offline-snapshot
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make offline-snapshot-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
                    // Check consolidated readiness after deployment
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event offline-compaction-snapshot') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Trigger offline-compaction-snapshot
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make offline-compaction-snapshot-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
                    // Check consolidated readiness after deployment
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make check-readiness-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Run SM-Event schedule scheduled-jobs') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Schedule all snapshot job
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make schedule-live-snapshot-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make schedule-offline-snapshot-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make schedule-offline-compaction-snapshot-consolidated stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_STACK_MANAGER_MESSENGER_CONFIG_PROFILE}/")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStagePostStep this
                }
            }
        }
        stage('Delete AEM OpenCloud Stacks') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Delete AEM OpenCloud Consolidated Stack
                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make delete-consolidated config_path=${env.AOC_CONFIG_DIR}/aem-aws-stack-builder/${params.AOC_CONFIG_PROFILE}/ stack_prefix=${params.STACK_PREFIX}")
                    // Delete AEM OpenCloud Stack Manager
                    ExecCommand(this, env.TMPDIR, "aem-aws-stack-builder", "make delete-stack-manager config_path=${env.AOC_CONFIG_DIR}/aem-aws-stack-builder/${params.AOC_STACK_MANAGER_CONFIG_PROFILE}/ stack_prefix=${params.STACK_MANAGER_PREFIX}")
                    }
                }
                post {
                    always {
                      // Running stage post-script
                      JenkinsStagePostStep this
                }
            }
        }
    }
    post {
        always {
            // Running global post-script
            JenkinsPipelinePostStep this
        }
    }
}
