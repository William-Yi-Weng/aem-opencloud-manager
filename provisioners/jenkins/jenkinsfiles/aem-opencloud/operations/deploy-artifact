@Library('aem-opencloud-manager') _

pipeline {
    agent {
        docker { image 'shinesolutions/aem-platform-buildenv-publisher:latest' }
    }
    environment {
        TMPDIR = "/tmp/shinesolutions/aem-opencloud-manager"
        AOC_CONFIG_DIR = "${env.TMPDIR}/aem-opencloud-config"
    }
    parameters {
        choice(name: 'AEM_COMPONENT', choices: ['author-primary', 'publish', 'author-publish-dispatcher'], description: 'AEM Component')
        choice(name: 'AEM_ID', choices: ['author', 'publish'], description: 'AEM ID')
        choice(name: 'PACKAGE_ACTIVATE', choices: ['true', 'false'], description: 'Activate package activation')
        choice(name: 'PACKAGE_FORCE', choices: ['true', 'false'], description: 'Force package installation')
        string(name: 'PACKAGE_GROUP', defaultValue: 'shinesolutions', description: 'Package group name')
        string(name: 'PACKAGE_NAME', defaultValue: 'aem-helloworld-content', description: 'Package name')
        choice(name: 'PACKAGE_REPLICATE', choices: ['true', 'false'], description: 'Activate package replication')
        string(name: 'PACKAGE_SOURCE', defaultValue: 'http://central.maven.org/maven2/com/shinesolutions/aem-helloworld-content/0.0.1/aem-helloworld-content-0.0.1.zip', description: 'Package source URL')
        string(name: 'PACKAGE_VERSION', defaultValue: '0.0.1', description: 'Package version')

        string(name: 'STACK_MANAGER_PREFIX', defaultValue: '', description: 'AEM OpenCloud Stack Manager prefix.')
        string(name: 'STACK_PREFIX', defaultValue: '', description: 'AEM OpenCloud Stack prefix.')
        string(name: 'AOC_VERSION_AEM_STACK_MANAGER_MESSENGER', defaultValue: '2.0.0', description: 'Version of aem-stack-manager-messenger repo')
    }
    stages {
        stage('Setup') {
            steps {
                // Setup Jenkins environment
                JenkinsInit(this, params.AOC_CUSTOM_MANAGER_STEPS_ARTIFACT_URL, env.TMPDIR)
                // Running global prerun-script
                JenkinsPipelinePreStep this
            }
        }
        stage('Prepare artifacts') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Prepare repositories
                    AocPrepareLibrary(this, "aem-stack-manager-messenger", params.AOC_VERSION_AEM_STACK_MANAGER_MESSENGER, params.AWS_LIBRARY_S3_BUCKET, AWS_LIBRARY_S3_PATH, env.TMPDIR)
            }
            post {
                always {
                    // Running stage post-script
                    JenkinsStagePostStep this
                }
            }
        }
        stage('Resolve dependencies') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Resolve dependencies
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make deps")
            }
            post {
                always {
                    // Running stage post-script
                    JenkinsStagePostStep this
                }
            }
        }
        stage('Trigger Stack Manager Event') {
            steps {

                    // Running Stage Prerun-Script
                    JenkinsStagePreStep this
                    // Trigger Stack Manager Event
                    ExecCommand(this, env.TMPDIR, "aem-stack-manager-messenger", "make deploy-artifact stack_prefix=${params.STACK_MANAGER_PREFIX} target_aem_stack_prefix=${params.STACK_PREFIX} config_path=${env.AOC_CONFIG_DIR}/aem-stack-manager-messenger/${params.AOC_CONFIG_PROFILE}/ component=${params.AEM_COMPONENT} aem_id=${params.AEM_ID} source=${params.PACKAGE_SOURCE} group=${params.PACKAGE_GROUP} name=${params.PACKAGE_NAME} version=${params.PACKAGE_VERSION} replicate=${params.PACKAGE_REPLICATE} activate=${params.PACKAGE_ACTIVATE} force=${params.PACKAGE_FORCE}")
            }
            post {
                always {
                    // Running stage post-script
                    JenkinsStagePostStep this
                }
            }
        }
    }
    post {
        always {
            // Running global post-script
            JenkinsPipelinePostStep this
        }
    }
}
