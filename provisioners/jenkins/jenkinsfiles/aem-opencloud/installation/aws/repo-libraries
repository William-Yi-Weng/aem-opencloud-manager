@Library('aem-opencloud') _

pipeline {
    agent any
    environment {
        TMPDIR = "/tmp/shinesolutions/aem-opencloud-manager"
        OC_CONFIG_DIR = "${env.TMPDIR}/opencloud_config"
    }
    parameters {

        string(name: 'VERSION_PACKER_AEM', defaultValue: '3.4.2', description: 'Version of packer-aem repo to archive')
        string(name: 'VERSION_AEM_AWS_STACK_BUILDER', defaultValue: '3.3.1', description: 'Version of aem-aws-stack-builder repo to archive')
        string(name: 'VERSION_AOC_CONFIG', defaultValue: '1.0.0', description: 'Version of the AEM OpenCloud configuration repository to archive.')
        string(name: 'VERSION_AEM_STACK_MANAGER_MESSENGER', defaultValue: '2.0.0', description: 'Version of aem-stack-manager-messenger repo to archive')
        string(name: 'VERSION_AEM_TEST_SUITE', defaultValue: '0.9.10', description: 'Version of aem-test-suite repo to archive')
    }
    stages {
        stage('Setup') {
            steps {
                // Setup Jenkins environment
                SetupEnv this
                // Running global prerun-script
                JenkinsGlobalJobPreScript this
            }
        }
        stage('Sync AEM OpenCloud Repositories') {
            steps {
                    // Job Prerun-Script
                    JenkinsStageJobPreScript this
                    // packer-aem
                    AwsMirrorGithubRepo(this, "shinesolutions", "packer-aem", params.VERSION_PACKER_AEM, params.AWS_LIBRARY_PATH, env.TMPDIR)
                    // aem-aws-stack-builder
                    AwsMirrorGithubRepo(this, "shinesolutions", "aem-aws-stack-builder", params.VERSION_AEM_AWS_STACK_BUILDER, params.AWS_LIBRARY_PATH, env.TMPDIR)
                    // aem-stack-manager-messenger
                    AwsMirrorGithubRepo(this, "shinesolutions", "aem-stack-manager-messenger", params.VERSION_AEM_STACK_MANAGER_MESSENGER, params.AWS_LIBRARY_PATH, env.TMPDIR)
                    // aem-test-suite
                    AwsMirrorGithubRepo(this, "shinesolutions", "aem-test-suite", params.VERSION_AEM_TEST_SUITE, params.AWS_LIBRARY_PATH, env.TMPDIR)
                }
            post {
                always {
                  // Running global post-script
                  JenkinsStageJobPostScript this
                }
            }
        }
        stage('Prepare artifacts') {
            steps {

                    // Job Prerun-Script
                    JenkinsStageJobPreScript this
                    // Prepare repositories
                    AwsPrepareRepo(this, "aem-aws-stack-builder", params.VERSION_AEM_AWS_STACK_BUILDER, params.AWS_LIBRARY_PATH, env.TMPDIR)
                    // Prepare AEM OpenCloud configuration
                    AemOcPrepareConfig(this, params.AOC_CONFIG_REPO_URL, env.TMPDIR)
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStageJobPostScript this
                }
            }
        }
        stage('Sync AEM OpenCloudd libraries ') {
            steps {

                    // Job Prerun-Script
                    JenkinsStageJobPreScript this
                    // packer-aem
                    RunMake(this, env.TMPDIR, "aem-aws-stack-builder", "make library config_path=${env.OC_CONFIG_DIR}/aem-aws-stack-builder/${params.AOC_CONFIG_PROFILE}/")
            }
            post {
                always {
                  // Running stage post-script
                  JenkinsStageJobPostScript this
                }
            }
        }
    }
    post {
        always {
          // Running global post-script
          JenkinsGlobalJobPostScript this
        }
    }
}
